name: Renovate Automerge
on:
  pull_request_target:
    types: [opened, synchronize, reopened]

jobs:
  check-version-bump:
    # Security: Only run for renovate branches from the same repository (not forks)
    if: |
      contains(github.head_ref, 'renovate/') &&
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PR branch
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          path: pr-branch
          token: ${{ secrets.PLATFORM_SYNC_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check for major version bump
        id: check-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const semver = require('semver')
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const dockerComposeFiles = files.filter(file => 
              file.filename.includes('docker-compose.yml')
            );

            let hasMajorBump = false;

            for (const file of dockerComposeFiles) {
              try {
                // Get base content
                const baseContent = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: file.filename,
                  ref: context.payload.pull_request.base.ref
                });
                
                // Get head content
                const headContent = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: file.filename,
                  ref: context.payload.pull_request.head.ref
                });

                const baseYaml = Buffer.from(baseContent.data.content, 'base64').toString('utf-8');
                const headYaml = Buffer.from(headContent.data.content, 'base64').toString('utf-8');

                // Extract image versions using regex
                const imageRegex = /image:\s*([^:\s]+):([^\s]+)/g;
                
                const baseMatches = [...baseYaml.matchAll(imageRegex)];
                const headMatches = [...headYaml.matchAll(imageRegex)];

                for (let i = 0; i < baseMatches.length; i++) {
                  if (headMatches[i]) {
                    const baseVersion = baseMatches[i][2];
                    const headVersion = headMatches[i][2];
                    
                    // Skip if versions are 'latest' or similar tags
                    if (baseVersion === 'latest' || headVersion === 'latest') {
                      continue;
                    }

                    const baseSemver = semver.coerce(baseVersion);
                    const headSemver = semver.coerce(headVersion);

                    if (baseSemver && headSemver) {
                      console.log(`Comparing ${baseVersion} -> ${headVersion}`);
                      
                      if (headSemver.major > baseSemver.major) {
                        console.log(`Major version bump detected: ${baseVersion} -> ${headVersion}`);
                        hasMajorBump = true;
                        break;
                      }
                    }
                  }
                }

                if (hasMajorBump) break;
              } catch (error) {
                console.log(`Error processing ${file.filename}: ${error.message}`);
              }
            }

            core.setOutput('major_bump', hasMajorBump.toString());

      - name: Update app.json versions
        id: update-versions
        run: |
          # Copy the update script from base branch to pr-branch (trusted code)
          cp .github/scripts/update-app-version.js pr-branch/.github/scripts/update-app-version.js
          
          # Work in PR branch directory
          cd pr-branch
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep 'docker-compose.yml' || true)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No docker-compose.yml files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Changed docker-compose files:"
          echo "$CHANGED_FILES"
          
          # Export for the node script
          export CHANGED_FILES
          
          # Run the update script (using base branch version for security)
          bun .github/scripts/update-app-version.js

      - name: Commit app.json version updates
        if: steps.update-versions.outputs.has_changes == 'true'
        run: |
          cd pr-branch
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all app.json files that were modified
          git add apps/*/app.json
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git commit -m "chore: update app.json versions to match docker-compose.yml"
          git push

      - name: Add automerge label for non-major updates
        if: steps.check-version.outputs.major_bump == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["automerge"]
            });
            console.log('Added automerge label - this is a non-major update');

      - name: Remove automerge label for major updates
        if: steps.check-version.outputs.major_bump == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: "automerge"
              });
              console.log('Removed automerge label - this is a major update');
            } catch (error) {
              console.log('Label does not exist or already removed');
            }

            // Add a comment to explain why automerge was skipped
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Automerge skipped**: This PR contains a major version update and requires manual review.'
            });
